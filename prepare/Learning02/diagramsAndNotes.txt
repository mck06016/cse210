Object: Job
Responsibilities: 
* to hold and display information relating to an individual job.
Behaviors: 
* to display job information in the form > 
"Job Title (Company) StartYear - EndYear"

Object: Resume
Responsibilities: 
* to hold and display resume information. 
Behaviors: 
* to display resume owner name.
* to display resume job items. 
* in the form> 
Name: Julia McKenzie
Jobs:
Job1 (Company1) StartYear1 - EndYear1
Job2 (Company2) StartYear2 - EndYear2


** Class Diagrams **
Class: Job
Member Variables: 
* _company: string
* _jobTitle: string
* _startYear: int
* _endYear: int
Methods: 
* Job()

* Display()
* - Display one job in the form - 
      "Job Title (Company) StartYear - EndYear"

Class: Resume
Member Variables: 
* _firstName: string
* _lastName: string
* _jobs: List<job>
Methods: 
* Resume()

* Display ()
* - Display the resume showing the name, followed by displaying each one of the jobs.
* - In the form > 
      Name: Julia McKenzie
      Jobs:
      Job1 (Company1) StartYear1 - EndYear1
      Job2 (Company2) StartYear2 - EndYear2



Notes: 
Terms and Definitions
Class - A new custom data type that defines attributes (member variables) and methods. This is like a blueprint to create instances or objects of that class. Example: A Person has given name and family name.

Instance - A variable whose data type is the class. We often use the term Object interchangeably. Example: We can have two instances of the Person class: one for John, and one for Mary.

Instantiate - A verb that means "to create an instance of." Example: We can instantiate the Person class to create a new object.

Method - A member function. Methods are called using "dot notation" with an instance of the class before the dot. Example: person1.GetEasternName()

Activity Instructions
Practice the principle of abstraction by creating classes to represent a resume or an job history for a person like you might see on LinkedIn.

Step 1: Design the Classes
      You program should contain two classes one for a Job and one for the Resume itself, as follows:

      Class: Job
      Responsibilities:
            Keeps track of the company, job title, start year, and end year.
      Behaviors:
            Displays the job information in the format "Job Title (Company) StartYear-EndYear", for example: "Software Engineer (Microsoft) 2019-2022".

      Class: Resume
      Responsibilities:
            Keeps track of the person's name and a list of their jobs.
      Behaviors:
            Displays the resume, which shows the name first, followed by displaying each one of the jobs.

Step 2: Start the Project
      Open the class project in VS Code.
      Navigate to the Learning02 project in the prepare folder. Find the Program.cs file, which will be your entry point for the program.
      Verify that you can run the project and see the beginning "Hello World" output.

Step 3: Create the Job class
      Create a new file for your job class. By convention this should be named Job.cs .
      Create the class (Hint this is the public class Job syntax).
      Create member variables in the class for each element that this class should contain. By convention these member variables should begin with an underscore and a lowercase letter such as _jobTitle .

Step 4: Test your Job class
      Back in your Program.cs file, add code to your Main function.
      Create a new job instance named job1 .
      Set the member variables using the dot notation (for example, job1._jobTitle = "Software Engineer";
      Verify that you can display the company of this job on the screen, again using the dot notation to access the member variable.
      Create a second job, set its variables, display this company on the screen as well.

Step 5: Add a Display method to the Job class
      Return to your Job.cs file and add a method (member function) to display the job details. This method should not have any parameters and does not need to return anything. By convention, this method should begin with a capital letter, such as Display, and if you have multiple words each word should be capitalized, such as DisplayJobDetails .
      This method should display the job details on the screen in the correct format. Remember that the method can access the member variables directly, without needing them to be passed into it.
      Return to your Program.cs file. Remove the lines of code where you displayed the company earlier, and replace them with calls to your new method. Remember that you call the method using the same dot notation such as job1.Display(); .

Step 6: Create the Resume class
      Create a new file for your Resume class. Each class should be in its own file and the file name should match the name of the class.
      Create the Resume class.
      Create the member variable for the person's name.
      Create the member variable for the list of Jobs. (Hint: the data type for this should be List<Job> , and it is probably easiest to initialize this to a new list right when you declare it..)

Step 7: Test your Resume class
      Return to your Program.cs. Add the end of the Main function, create a new instance of the Resume class.
      Add the two jobs you created earlier, to the list of jobs in the resume object.
      Verify that you can access and display the first job title using dot notation similar to myResume._jobs[0]._jobTitle .

Step 8: Add a Display method to the Resume class

      Return to your Resume class and add a method to display its details.
      This method should not have any parameters and should not return anything.
      In the method body, you should display the person's name and then iterate through each Job instance in the list of jobs and display them.
      Hint: remember that you can call each job's Display method that you created earlier.
      Return to your main function, remove any code that is displaying information, and instead, add a call at the end to the Display method from your Resume class to display the name and all the jobs in one line.

Step 9: Submit